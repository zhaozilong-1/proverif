type point.
type skey.
free IDi,IDq,regroup,NIDj:bitstring[private].
free x:bitstring.
free c:channel.
fun mul(bitstring, bitstring): bitstring.
const g:point.
fun EC_Mul(bitstring, point): point.
equation 
forall a:bitstring,b:bitstring;
EC_Mul(a,EC_Mul(b,g))=EC_Mul(b,EC_Mul(a,g)).
fun concat(bitstring, bitstring): bitstring. 
fun deconcat(bitstring):bitstring.
fun split(bitstring):bitstring.
fun xor(bitstring, bitstring) : bitstring.
fun H(bitstring):bitstring.
fun Enc(bitstring,skey):bitstring.
reduc forall m:bitstring, k:skey; Dec(Enc(m,k),k) = m.
fun T(bitstring, bitstring): bitstring.
fun point2str(point):bitstring [typeConverter].
fun str2point(bitstring):point [typeConverter].
fun str2key(bitstring):skey [typeConverter].
fun key2str(skey):bitstring [typeConverter].
fun point2key(point):skey [typeConverter].


query attacker(IDi).
query attacker(IDq).
query attacker(regroup).
query attacker(NIDj).
query secret GKqk.
query secret tgk.
query secret GKqk_.
query secret tkey_node.
query secret tkey_qkcs.
query secret GIDjk.
query secret GID_node.
query secret GID_qkcs.

let user(ri:bitstring,Tqx:bitstring,si:skey)=
    let Kiq = T(ri,Tqx) in
    let trix = T(ri,x) in
    let Ci = Enc(concat(concat(IDi,IDq),trix),str2key(Kiq)) in
    new T1:bitstring;
    let MACi = H(concat(concat(concat(Ci,H(Kiq)),trix),T1)) in
    out(c,(Ci,trix,MACi,T1));

    in(c,(Cq:bitstring,trqx:bitstring,MACq:bitstring,T2:bitstring));
    let Kqi_ = T(key2str(si),trqx) in
    let Dkqi_ =Dec(Cq,str2key(Kqi_)) in
    let Trqx  = deconcat(Dkqi_) in 
    
    let cert_ = T(ri,trqx) in
    let MACq_ = H(concat(concat(concat(Cq,H(Kqi_)),cert_),T2)) in
    
    in(c,Cqi:bitstring);
    let bi_ = deconcat(Dec(Cqi,str2key(H(cert_)))) in
    new T4:bitstring;
    let EUi = Enc(concat(concat(concat(regroup,cert_),H(concat(concat(IDi,IDq),H(cert_)))),T4),str2key(H(concat(H(cert_),bi_)))) in
    out(c,EUi).

let qkcs(q:skey,rq:bitstring,Tsix:bitstring,db:skey,GKqk:skey)=
    in(c,(Ci:bitstring,trix:bitstring,MACi:bitstring,T1:bitstring));
    let Kiq_ = T(key2str(q),trix) in
    let DKiq_ = Dec(Ci,str2key(Kiq_)) in
    let Trix = deconcat(DKiq_) in 
    let MAC_ = H(concat(concat(concat(Ci,H(Kiq_)),Trix),T1)) in
    let Kqi = T(rq,Tsix) in
    let trqx = T(rq,x) in
    
    let cert = T(rq,trix) in
    let Cq = Enc(concat(IDi,IDq),str2key(trqx)) in
    new T2:bitstring;
    let MACq = H(concat(concat(concat(Cq,H(Kqi)),cert),T2)) in
    out(c,(Cq,trqx,MACq,T2));
   
    let HIDi = H(concat(concat(IDi,IDq),H(cert))) in
    let HSKi = H(cert) in
    new T3:bitstring;
    let Cbi = Enc(concat(concat(HIDi,HSKi),T3),db) in
    out(c,Cbi);
  
    in(c,(Ckeybq:bitstring,CGIDbq:bitstring,MACbq:bitstring));
    let skbq_ = xor(HSKi,H(concat(cert,HSKi))) in 
    let tkey_qkcs = xor(skbq_,Ckeybq) in
    let GID_qkcs = xor(tkey_qkcs,CGIDbq) in 
    let MACbq_ = xor(skbq_,deconcat(tkey_qkcs)) in
   
    let Cgk = concat(concat(xor(key2str(GKqk),tkey_qkcs),GID_qkcs),H(concat(key2str(GKqk),GID_qkcs))) in
    out(c,Cgk).

let BS(db:skey,bi:bitstring,tgk:skey,Di:point,rb:bitstring)=
    in(c,CNIDj:bitstring);
    in(c,Cbi:bitstring);
    let HIDi_ = deconcat(Dec(Cbi,db)) in
    let HSKi_ = deconcat(Dec(Cbi,db)) in
    let T3_ = deconcat(Dec(Cbi,db)) in
    let Cqi = Enc(concat(H(concat(IDq,bi)),bi),str2key(HSKi_)) in
    out(c,Cqi);
    in(c,EUi:bitstring);
    let cert = Dec(EUi,str2key(H(concat(HSKi_,bi)))) in 
    
    let Rb = EC_Mul(rb,g) in
    let MACbj = H(concat(point2str(Rb),NIDj)) in
    out(c,(Rb,MACbj));
    in(c,(Rj:point,MACjb:bitstring));
    let GIDjk = H(key2str(tgk)) in
    let MACjb_ = H(concat(point2str(Rj),NIDj)) in
    if  MACjb_ = MACjb then 
        let skj = EC_Mul(rb,Rj) in
        let skencj = split(point2str(skj)) in
        let skmacj = split(point2str(skj)) in 
        let Ckeyj = xor(xor(skencj,key2str(tgk)),CNIDj) in
        let CGIDj = xor(key2str(tgk),GIDjk) in 
        let MACj = xor(skmacj,split(key2str(tgk))) in
        out(c,(Ckeyj,CGIDj,MACj));
   
        let skbq = xor(HSKi_,H(concat(cert,HSKi_))) in 
        let Ckeybq = concat(xor(skbq,key2str(tgk)),HIDi_) in
        let CGIDbq = xor(key2str(tgk),GIDjk) in 
        let MACbq = xor(skbq,deconcat(key2str(tgk))) in
        out(c,(Ckeybq,CGIDbq,MACbq))
    else
        0.

let node(di:skey,Db:point,rj:bitstring)=
    let CNIDj = H(NIDj) in
    out(c,CNIDj);
    let Rj = EC_Mul(rj,g) in
    let MACjb = H(concat(point2str(Rj),NIDj)) in
    out(c,(Rj,MACjb));
    in(c,(Rb:point,MACbj:bitstring));
    let MACbj_ = H(concat(point2str(Rb),NIDj)) in
    if  MACbj_ = MACbj then 
        in(c,((Ckeyj:bitstring,CGIDj:bitstring,MACj:bitstring)));
        let skj_ = EC_Mul(rj,Rb) in
        let skencj_ = split(point2str(skj_)) in
        let skmacj_ = split(point2str(skj_)) in 
        let tkey_node =xor(xor(skencj_,Ckeyj),CNIDj) in
        let GID_node = xor(tkey_node,CGIDj) in
        let MACj_ = xor(skmacj_,split(tkey_node)) in
        in(c,Cgk:bitstring);
        let GID_node_ = deconcat(Cgk) in
        let Ctemnode = deconcat(Cgk) in
        if GID_node = GID_node_ then
            let GKqk_ = xor(Ctemnode, tkey_node) in
            0
        else
            0
    else
        0.

process
    new ri:bitstring;
    new rq:bitstring;
    new rb:bitstring;
    new rj:bitstring;
    new q:skey;
    new si:skey;
    new db:skey;
    new di:skey;
    new Gkqk:skey;
    new bi:bitstring;
    new tgk:skey;
    let Db = EC_Mul(key2str(db),g) in
    let Di = EC_Mul(key2str(di),g) in
    let Tqx = T(key2str(q),x) in
    let Tsix = T(key2str(si),x) in

    (!user(ri,Tqx,si)|!qkcs(q,rq,Tsix,db,Gkqk)|!BS(db,bi,tgk,Di,rb)|!node(di,Db,rj))
